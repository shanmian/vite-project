为了实现请求取消的功能，我们可以使用 Axios 提供的 `CancelToken` 或者使用 AbortController（推荐使用 AbortController，因为它是现代浏览器提供的标准 API，且更简洁）。以下是使用 `AbortController` 来实现请求取消功能的代码：

### 修改后的 `useRequest` Hook

```typescript
import { useState, useCallback, useRef } from 'react';
import type { AxiosRequestConfig } from 'axios';
import axiosInstance from '../utils/axios';

// 请求配置选项接口
interface RequestOptions<T> {
  manual?: boolean;      // 是否手动触发请求
  onSuccess?: (data: T) => void;    // 请求成功回调
  onError?: (error: Error) => void;  // 请求失败回调
  initialData?: T | null;    // 初始数据
}

// 请求结果接口
interface RequestResult<T> {
  data: T | null;        // 响应数据
  loading: boolean;      // 加载状态
  error: Error | null;   // 错误信息
  run: (config?: AxiosRequestConfig) => Promise<void>;  // 执行请求方法
  reset: () => void;     // 重置状态方法
  cancel: () => void;    // 取消请求方法
}

/**
 * 通用请求 Hook
 * @param config - axios 请求配置
 * @param options - 请求选项
 * @returns 请求结果对象
 */
function useRequest<T = any>(
  config: AxiosRequestConfig,
  options: RequestOptions<T> = {}
): RequestResult<T> {
  // 解构配置选项，设置默认值
  const { 
    manual = false,      // 是否手动触发
    onSuccess,           // 成功回调
    onError,            // 失败回调
    initialData = null  // 初始数据
  } = options;

  // 状态管理
  const [loading, setLoading] = useState(!manual);  // 加载状态
  const [data, setData] = useState<T | null>(initialData);  // 数据状态
  const [error, setError] = useState<Error | null>(null);   // 错误状态

  // 使用 useRef 存储 AbortController 实例
  const abortControllerRef = useRef<AbortController | null>(null);

  /**
   * 执行请求方法
   * @param runConfig - 可选的运行时配置，会与初始配置合并
   */
  const run = useCallback(async (runConfig?: AxiosRequestConfig) => {
    // 如果存在之前的请求，取消它
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }

    // 创建新的 AbortController 实例
    const abortController = new AbortController();
    abortControllerRef.current = abortController;

    const finalConfig = { 
      ...config, 
      ...runConfig,
      signal: abortController.signal,  // 将 signal 添加到请求配置中
    };

    setLoading(true);
    setError(null);
    
    try {
      const res = await axiosInstance.request<T>(finalConfig);
      setData(res as T);
      onSuccess?.(res as T);
    } catch (err) {
      // 如果请求是被取消的，不处理错误
      if (axiosInstance.isCancel(err)) {
        return;
      }
      const error = err instanceof Error ? err : new Error('请求失败');
      setError(error);
      onError?.(error);
    } finally {
      setLoading(false);
      abortControllerRef.current = null;  // 请求完成后清除 AbortController
    }
  }, [config, onSuccess, onError]);

  /**
   * 取消当前请求
   */
  const cancel = useCallback(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      abortControllerRef.current = null;  // 清除 AbortController
    }
  }, []);

  /**
   * 重置所有状态到初始值
   */
  const reset = useCallback(() => {
    setData(initialData);
    setError(null);
    setLoading(false);
  }, [initialData]);

  return { data, loading, error, run, reset, cancel };
}

export default useRequest;
```

### 主要改动点：
1. **引入 `AbortController`**：
   - 使用 `AbortController` 来控制请求的取消。
   - 在每次发起请求时，创建一个新的 `AbortController` 实例，并将其 `signal` 属性添加到请求配置中。

2. **取消请求**：
   - 在 `run` 方法中，如果存在之前的请求（通过 `abortControllerRef.current` 判断），则调用 `abort()` 方法取消之前的请求。
   - 新增 `cancel` 方法，用于手动取消当前请求。

3. **错误处理**：
   - 在 `catch` 块中，检查错误是否是请求取消导致的（通过 `axios.isCancel(err)`），如果是取消请求导致的错误，则不处理。

4. **清除 AbortController**：
   - 在请求完成后（无论是成功还是失败），清除 `abortControllerRef.current`，避免内存泄漏。

### 使用示例：
```typescript
const { data, loading, error, run, cancel } = useRequest({
  url: '/api/data',
  method: 'GET',
});

// 手动触发请求
run();

// 取消请求
cancel();
```

### 注意事项：
- `AbortController` 是现代浏览器的特性，如果需要兼容旧版浏览器，可能需要使用 `CancelToken`。
- 如果请求被取消，`onError` 回调不会被触发，因为取消请求通常是一个主动行为，不需要处理错误。
